// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LeadStatus {
  NOT_QUALIFIED
  MEDIUM
  HIGH
}

enum FollowUpStatus {
  PENDING
  COMPLETED
  CANCELLED
}

model User {
  id           String     @id @default(uuid())
  username     String     @unique
  companyName  String     @map("company_name")
  phoneNumber  String     @unique @map("phone_number")
  email        String     @unique
  password     String
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")
  
  // Relations
  properties   Property[]
  
  @@map("users")
}

model Lead {
  id              String          @id @default(uuid())
  telegramUserId  String          @map("telegram_user_id")
  name            String?
  phoneNumber     String?         @map("phone_number")
  budget          Decimal?        @db.Decimal(15, 2)
  expectations    String?
  status          LeadStatus      @default(NOT_QUALIFIED)
  language        String          @default("en")
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  
  // Relations
  chatHistory     ChatHistory[]
  followUps       FollowUp[]
  
  @@map("leads")
}

enum PropertyStatus {
  AVAILABLE
  RESERVED
  SOLD
  UNDER_MAINTENANCE
}

model Property {
  id             String          @id @default(uuid())
  userId         String          @map("user_id")
  images         Json            // Array of image objects with Base64, isMain, order
  videos         Json?           // Array of video objects with Base64, order
  description    String
  pricePerSqft   Decimal         @map("price_per_sqft") @db.Decimal(10, 2)
  totalPrice     Decimal?        @map("total_price") @db.Decimal(15, 2)
  location       String
  contactInfo    String          @map("contact_info")
  propertyType   String?         @map("property_type")
  area           Decimal?        @db.Decimal(10, 2)
  bedrooms       Int?
  bathrooms      Int?
  features       Json?           // Array of feature strings (pool, terrace, garden, etc.)
  status         PropertyStatus  @default(AVAILABLE)
  mainImageIndex Int?           @default(0) @map("main_image_index")
  amenities      Json?           // Array of amenity strings
  floorPlan      String?         @map("floor_plan") // Base64 string for floor plan image
  virtualTour    String?         @map("virtual_tour") // URL for virtual tour
  isActive       Boolean         @default(true) @map("is_active")
  isFeatured     Boolean         @default(false) @map("is_featured")
  viewCount      Int             @default(0) @map("view_count")
  lastViewed     DateTime?       @map("last_viewed")
  createdAt      DateTime        @default(now()) @map("created_at")
  updatedAt      DateTime        @updatedAt @map("updated_at")
  
  // Relations
  user           User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("properties")
}

model ChatHistory {
  id              String   @id @default(uuid())
  telegramUserId  String   @map("telegram_user_id")
  leadId          String?  @map("lead_id")
  message         String
  response        String?
  messageType     String   @default("text") @map("message_type")
  language        String   @default("en")
  timestamp       DateTime @default(now())
  
  // Relations
  lead            Lead?    @relation(fields: [leadId], references: [id], onDelete: SetNull)
  
  @@map("chat_history")
}

model FollowUp {
  id        String         @id @default(uuid())
  leadId    String         @map("lead_id")
  activity  String
  status    FollowUpStatus @default(PENDING)
  notes     String?
  createdAt DateTime       @default(now()) @map("created_at")
  updatedAt DateTime       @updatedAt @map("updated_at")
  
  // Relations
  lead      Lead           @relation(fields: [leadId], references: [id], onDelete: Cascade)
  
  @@map("follow_ups")
}


